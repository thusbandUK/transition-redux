
POINTS TO ADDRESS:
1) hook up the metals so that they render for Edexcel and OCRB
a) transfer rowOfTubes to features
b) add a rowOfTubesSlice file
c) in rowOfTubes add a useEffect hook to dispatch the selection of metals that matches both the examboard and the reagent
d) create a new reducer that takes care of the reactions logic
e) probably need another reducer to handle the addition of excess reagent 



new links:

https://redux.js.org/tutorials/quick-start

for a quick-start with redux 

So I've more or less followed that but...

this post: https://stackoverflow.com/questions/73834918/react-router-dom6-4-1-not-rendering-components-and-also-not-logging-any-errors

...made me realise that the <Router> wrapper consistently demanded by the error messages is referring to a react-redux router, not
a react-router-dom <ProvideRouter>

this is all exacerbated by the fact that the current redux docs are not written for the latest react-router-dom dox, that said
there seems to be a way of doing react-router-dom, available here: 

https://reactrouter.com/en/main/upgrading/v5#relative-routes-and-links

...that shows a v6 router app that looks remarkably similar to a v5 router app

So the best thing might be to mess around a bit more with the Router aspect until you can get it as most like what it used to be
and then you can hopefully switch out BrowserProvider for Provider. I mean the implication seems to be that react-redux provides
a way of routing that users the react-redux router sort of instead of but still in tandem with the react-router-dom

Okay but last thing I did (from the stackexchange post above) worked!!! You should be cooking on gas very soon...





<3 - on redux>

5) so there are all these things to link up, you need to think about how your state will looks
a) examboard 
b) your data file needs to basically have true false booleans for each exam board
c) which reagents are needed, which will render the menus differently
d) the selection of exam board needs to be a bit sort of set in stone
e) exam board dictates which reagents render, both the complex ions and the acids / bases
f) the logic you currently have for dictating the colour changes, which precipitate appears needs to go in a redux file
g) AOB

<3 - on redux ENDS>

<4 - text>

right this is a biggie, the text needs to render differently depending on the exam board

<4 - text ENDS>

<1 - on routing>

so, you've got some good routing going on, you need to:
create the intro page in a single component (switch in for current menu component)
1) intro blurb
2) title useParams get title from url (or if no matching query - complex ions)
3) exam board buttons
4) menu
   a) menu needs to configure differently using similar logic to title, if it's the intro the big menu, otherwise the small one
   b) 
5) test hypothesis that /reactions/:reactant dynamic path didn't work but there needs to be a <reactions> parent component or something
similar

So that was a pretty brutal day, oof! You need to do it all a new way now because up-to-date React isn't really compatabile with
out-of-date React-router-dom, which unfortunately meant I had to learn a completely new way of using Router than I was taught
in Codecademy, euch. There are a few really good places, obvs all filed under coding hacks and or react BUT here's a choice selection:

This looks awesome, only caught it right at the end:

https://www.freecodecamp.org/news/how-to-use-react-router-version-6/#:~:text=To%20install%20React%20Router%2C%20all,%2Drouter%2Ddom%406%20.

React Router dox (latest version 6.4.3)

https://reactrouter.com/en/main/components/nav-link

Read all of this stackexchange query and response so many times and realised on final reread the above-described compatability issue

https://stackoverflow.com/questions/43351752/react-router-changes-url-but-not-view





There does need to be some routing. We can use Ben's format, the landing page will have the introduction AND the exam board selector

then that takes the user to the reactions page, where it will have the links at the bottom, as per Ben's, so two pages basically

you're going to need a component that says: "Oop, are you sure? You're gonna lose your work"

<1 - on routing ENDS>


<2 - on overriding the link colors>

I think you need to make a custom theme...
https://create-react-app.dev/docs/adding-bootstrap/#using-a-custom-theme

...like so...
https://getbootstrap.com/docs/4.6/getting-started/theming/#variable-defaults



This first page... 
https://react-bootstrap.github.io/getting-started/introduction/

...led to the two above via this:
https://getbootstrap.com/docs/4.4/getting-started/theming/

<2 - on overriding the link colors ENDS>